cat file.log | grep "ERROR"	      Match lines containing ERROR
cat file.log | grep -i "fail"	      Case-insensitive search
cat file.log | grep -v "INFO"	      Exclude lines containing INFO
`cat file.log | grep -E "error	      fail
cat file.log | grep -E "192\.168\.1\.[0-9]{1,3}"	      Match IPs in a subnet
cat file.log | grep -E "^\[.*\]$"	      Match lines enclosed in square brackets
grep -oE "[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+" file.log	      Extract IP addresses
grep -Eo "[0-9]{2}/[A-Za-z]+/[0-9]{4}" file.log	      Extract date format like 17/Apr/2025
grep -c "ERROR" file.log	      Count matching lines
grep "pattern" file.log > output.txt	      Output matching lines to a file
cat file.log | awk '{print $1, $2}'	      Print the 1st and 2nd columns (space-separated)
awk '/error/ {print $5}' file.log	      Print 5th field if line contains "error"
awk '{count[$5]++} END {for (ip in count) print ip, count[ip]}' file.log	      Count occurrences of field 5 (e.g. IPs)
awk '($3 == "sshd")' /var/log/auth.log	      Match lines where 3rd field is "sshd"
awk '$0 ~ /pattern/' file.log	      Basic match using regex in awk
awk '$0 !~ /pattern/' file.log	      Exclude lines matching pattern
awk '{print tolower($0)}' file.log	      Convert all lines to lowercase
awk '{print > "output.txt"}'	      Redirect awk output to file
awk -F: '{print $1}' /etc/passwd	      Use colon as delimiter (fields)
tail -f file.log | grep --line-buffered "ERROR"	      Real-time log monitoring
cat file.log | sort | uniq -c | sort -nr	      Count and sort unique lines by frequency
